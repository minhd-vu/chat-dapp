{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","columns","field","headerName","minWidth","flex","App","state","messages","accounts","contract","page","message","componentDidMount","eth","getAccounts","net","getId","networkId","deployedNetwork","ChatContract","networks","instance","Contract","abi","address","setState","getMessages","alert","error","methods","get","call","response","map","m","id","Date","time","toLocaleString","author","length","onSubmit","e","preventDefault","send","from","location","reload","this","className","style","height","width","rows","pageSize","pagination","onPageChange","p","TextField","label","variant","fullWidth","required","InputProps","endAdornment","InputAdornment","position","IconButton","edge","color","type","Send","value","onInput","target","Component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mp8IAqCeA,EAnCC,kBACd,IAAIC,SAAQ,SAACC,EAASC,GAEpBC,OAAOC,iBAAiB,OAAxB,sBAAgC,kCAAAC,EAAA,0DAE1BF,OAAOG,SAFmB,wBAGtBC,EAAO,IAAIC,IAAKL,OAAOG,UAHD,kBAMpBH,OAAOG,SAASG,SANI,OAQ1BR,EAAQM,GARkB,gDAU1BL,EAAO,EAAD,IAVoB,gCAcrBC,OAAOI,MAERA,EAAOJ,OAAOI,KACpBG,QAAQC,IAAI,2BACZV,EAAQM,KAIFK,EAAW,IAAIJ,IAAKK,UAAUC,aAClC,yBAEIP,EAAO,IAAIC,IAAKI,GACtBF,QAAQC,IAAI,gDACZV,EAAQM,IA3BoB,8D,4DCI9BQ,EAAU,CACf,CACCC,MAAO,KACPC,WAAY,OACZC,SAAU,KAEX,CACCF,MAAO,SACPC,WAAY,SACZC,SAAU,KAEX,CACCF,MAAO,UACPC,WAAY,UACZE,KAAM,IAoHOC,E,4MA7GdC,MAAQ,CACPC,SAAU,EACVf,KAAM,KACNgB,SAAU,KACVC,SAAU,KACVC,KAAM,EACNC,QAAS,I,EAGVC,kB,sBAAoB,oCAAAtB,EAAA,+EAGCN,IAHD,cAGZQ,EAHY,gBAMKA,EAAKqB,IAAIC,cANd,cAMZN,EANY,gBASMhB,EAAKqB,IAAIE,IAAIC,QATnB,OASZC,EATY,OAUZC,EAAkBC,EAAaC,SAASH,GACxCI,EAAW,IAAI7B,EAAKqB,IAAIS,SAC7BH,EAAaI,IACbL,GAAmBA,EAAgBM,SAKpC,EAAKC,SAAS,CAAEjC,OAAMgB,WAAUC,SAAUY,GAAY,EAAKK,aAlBzC,kDAqBlBC,MAAM,0EAGNhC,QAAQiC,MAAR,MAxBkB,0D,EA4BpBF,Y,sBAAc,gCAAApC,EAAA,6DACLmB,EAAa,EAAKH,MAAlBG,SADK,SAIUA,EAASoB,QAAQC,MAAMC,OAJjC,OAIPC,EAJO,OAMbrC,QAAQC,IAAIoC,GAENzB,EAAWyB,EAASC,KAAI,SAAAC,GAAC,MAAK,CACnCC,GAAI,IAAIC,KAAc,IAATF,EAAEG,MAAaC,iBAC5BC,OAAQL,EAAEK,OACV5B,QAASuB,EAAEvB,YAIZ,EAAKc,SAAS,CACblB,SAAUA,EACVG,KAAMH,EAASiC,OAzDD,KAwCF,2C,EAqBdC,S,uCAAW,WAAOC,GAAP,qBAAApD,EAAA,6DACVoD,EAAEC,iBADQ,EAE8B,EAAKrC,MAArCE,EAFE,EAEFA,SAAUC,EAFR,EAEQA,SAAUE,EAFlB,EAEkBA,QAFlB,SAGJF,EAASoB,QAAQe,KAAKjC,GAASiC,KAAK,CAAEC,KAAMrC,EAAS,KAHjD,OAIVpB,OAAO0D,SAASC,QAAO,GAJb,2C,kGAOX,WAAU,IAAD,OACR,OAAKC,KAAK1C,MAAMd,KAIf,yBAAKyD,UAAU,YACd,wBAAIA,UAAU,eAAd,aACA,uBAAGA,UAAU,eAAb,YAAqCD,KAAK1C,MAAME,SAAS,IACzD,yBAAK0C,MAAO,CAAEC,OAAQ,IAAKC,MAAO,SACjC,kBAAC,IAAD,CACCC,KAAML,KAAK1C,MAAMC,SACjBP,QAASA,EACTsD,SAhFW,GAiFXC,YAAU,EACVC,aAAc,SAAAC,GAAC,OAAI,EAAKhC,SAAS,CAAEf,KAAM+C,KACzC/C,KAAMsC,KAAK1C,MAAMI,QAGnB,0BAAM+B,SAAUO,KAAKP,UACpB,kBAACiB,EAAA,EAAD,CACCT,UAAU,OACVd,GAAG,iBACHwB,MAAM,kBACNC,QAAQ,WACRC,WAAS,EACTC,UAAQ,EACRC,WAAY,CACXC,aACC,kBAACC,EAAA,EAAD,CAAgBC,SAAS,OACxB,kBAACC,EAAA,EAAD,CAAYC,KAAK,MAAMC,MAAM,UAAUC,KAAK,UAC3C,kBAACC,EAAA,EAAD,SAKJC,MAAOxB,KAAK1C,MAAMK,QAClB8D,QAAS,SAAA/B,GAAC,OAAI,EAAKjB,SAAS,CAAEd,QAAS+B,EAAEgC,OAAOF,aAlC5C,4E,GApEQG,aCjBEC,QACW,cAA7BxF,OAAO0D,SAAS+B,UAEa,UAA7BzF,OAAO0D,SAAS+B,UAEhBzF,OAAO0D,SAAS+B,SAASC,MACvB,2DCZJC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e5d88454.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://localhost:7545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport ChatContract from \"./contracts/Chat.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport { TextField, InputAdornment, IconButton } from \"@mui/material\";\nimport { Send } from \"@mui/icons-material\";\n\nconst columns = [\n\t{\n\t\tfield: \"id\",\n\t\theaderName: \"Date\",\n\t\tminWidth: 200,\n\t},\n\t{\n\t\tfield: \"author\",\n\t\theaderName: \"Author\",\n\t\tminWidth: 400,\n\t},\n\t{\n\t\tfield: \"message\",\n\t\theaderName: \"Message\",\n\t\tflex: 1,\n\t},\n];\n\nconst pageSize = 10;\n\nclass App extends Component {\n\tstate = {\n\t\tmessages: 0,\n\t\tweb3: null,\n\t\taccounts: null,\n\t\tcontract: null,\n\t\tpage: 0,\n\t\tmessage: \"\"\n\t};\n\n\tcomponentDidMount = async () => {\n\t\ttry {\n\t\t\t// Get network provider and web3 instance.\n\t\t\tconst web3 = await getWeb3();\n\n\t\t\t// Use web3 to get the user\"s accounts.\n\t\t\tconst accounts = await web3.eth.getAccounts();\n\n\t\t\t// Get the contract instance.\n\t\t\tconst networkId = await web3.eth.net.getId();\n\t\t\tconst deployedNetwork = ChatContract.networks[networkId];\n\t\t\tconst instance = new web3.eth.Contract(\n\t\t\t\tChatContract.abi,\n\t\t\t\tdeployedNetwork && deployedNetwork.address,\n\t\t\t);\n\n\t\t\t// Set web3, accounts, and contract to the state, and then proceed with an\n\t\t\t// example of interacting with the contract\"s methods.\n\t\t\tthis.setState({ web3, accounts, contract: instance }, this.getMessages);\n\t\t} catch (error) {\n\t\t\t// Catch any errors for any of the above operations.\n\t\t\talert(\n\t\t\t\t`Failed to load web3, accounts, or contract. Check console for details.`,\n\t\t\t);\n\t\t\tconsole.error(error);\n\t\t}\n\t};\n\n\tgetMessages = async () => {\n\t\tconst { contract } = this.state;\n\n\t\t// Get the value from the contract to prove it worked.\n\t\tconst response = await contract.methods.get().call();\n\n\t\tconsole.log(response);\n\n\t\tconst messages = response.map(m => ({\n\t\t\tid: new Date(m.time * 1000).toLocaleString(),\n\t\t\tauthor: m.author,\n\t\t\tmessage: m.message,\n\t\t}));\n\n\t\t// Update state with the result.\n\t\tthis.setState({\n\t\t\tmessages: messages,\n\t\t\tpage: messages.length / pageSize,\n\t\t});\n\t};\n\n\tonSubmit = async (e) => {\n\t\te.preventDefault();\n\t\tconst { accounts, contract, message } = this.state;\n\t\tawait contract.methods.send(message).send({ from: accounts[0] });\n\t\twindow.location.reload(false);\n\t}\n\n\trender() {\n\t\tif (!this.state.web3) {\n\t\t\treturn <div>Loading Web3, accounts, and contract...</div>;\n\t\t}\n\t\treturn (\n\t\t\t<div className=\"App mx-5\">\n\t\t\t\t<h1 className=\"text-center\">Chat dApp</h1>\n\t\t\t\t<p className=\"text-center\">Account: {this.state.accounts[0]}</p>\n\t\t\t\t<div style={{ height: 500, width: \"100%\" }}>\n\t\t\t\t\t<DataGrid\n\t\t\t\t\t\trows={this.state.messages}\n\t\t\t\t\t\tcolumns={columns}\n\t\t\t\t\t\tpageSize={pageSize}\n\t\t\t\t\t\tpagination\n\t\t\t\t\t\tonPageChange={p => this.setState({ page: p })}\n\t\t\t\t\t\tpage={this.state.page}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<form onSubmit={this.onSubmit} >\n\t\t\t\t\t<TextField\n\t\t\t\t\t\tclassName=\"my-3\"\n\t\t\t\t\t\tid=\"outlined-basic\"\n\t\t\t\t\t\tlabel=\"Send Message...\"\n\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\trequired\n\t\t\t\t\t\tInputProps={{\n\t\t\t\t\t\t\tendAdornment: (\n\t\t\t\t\t\t\t\t<InputAdornment position=\"end\">\n\t\t\t\t\t\t\t\t\t<IconButton edge=\"end\" color=\"primary\" type=\"submit\">\n\t\t\t\t\t\t\t\t\t\t<Send />\n\t\t\t\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t\t\t\t</InputAdornment>\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tvalue={this.state.message}\n\t\t\t\t\t\tonInput={e => this.setState({ message: e.target.value })}\n\t\t\t\t\t/>\n\t\t\t\t</form>\n\t\t\t</div >\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}